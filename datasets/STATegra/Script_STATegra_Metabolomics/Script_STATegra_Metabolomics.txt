%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%         PRE-PROCESSING Metabolomics STATegra DATA          %%%%%%%    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% By Johan Weternhuis and Ana Conesa
%% Raw data are available at Metabolights MTBLS283


%% From Raw data to prepro.xlsx files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Raw data at Metabolights consist of CDF and msML files. NET CDF is a vendor supported export option for that instrument
% Proteowizard msconvert was used to convert to mzML (http://proteowizard.sourceforge.net/tools.shtml)
% Vendor software is used to oatain raw quantification values. The
% software applies an integration method that uses known masses retention times of our targets and
% internal standards to integrate peaks. The raw data were pre-processed using Agilent MassHunter Quantitative Analysis
% software for GC-MS (Agilent, Version B.04.00). For the LC-MS
% Acquired data were evaluated using TargetLynx software (Waters).


%%%%  THIS PORTION OF THE SCRIPT IS RUN IN MATLAB AS .M SCRIPT %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: GC_MS_prepro.xlsx
%    Worksheet: RAW DATA
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2019/06/25 11:08:51

%% Import the data
[~, ~, raw] = xlsread('GC_MS_raw_data.xlsx','RAW DATA','A2:CO65');
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[1,2]);
raw = raw(:,[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
GCMSprepro = table;

%% Allocate imported array to column variable names
GCMSprepro.SAMPLENAME = cellVectors(:,1);
GCMSprepro.DATAFILENAME = cellVectors(:,2);
GCMSprepro.pyruvicacid = data(:,1);
GCMSprepro.pyruvicacid13Cversion = data(:,2);
GCMSprepro.lacticacid = data(:,3);
GCMSprepro.alaninemz116 = data(:,4);
GCMSprepro.alaninemz11813Cversion = data(:,5);
GCMSprepro.alaninemz218 = data(:,6);
GCMSprepro.alaninemz22113Cversion = data(:,7);
GCMSprepro.valine = data(:,8);
GCMSprepro.valine13Cversion = data(:,9);
GCMSprepro.leucine = data(:,10);
GCMSprepro.leucine13Cversion = data(:,11);
GCMSprepro.isoleucine = data(:,12);
GCMSprepro.isoleucine13Cversion = data(:,13);
GCMSprepro.proline = data(:,14);
GCMSprepro.proline13Cversion = data(:,15);
GCMSprepro.glycine = data(:,16);
GCMSprepro.succinicacid = data(:,17);
GCMSprepro.succinicacid13Cversion = data(:,18);
GCMSprepro.glycericacidmz189 = data(:,19);
GCMSprepro.glycericacidmz19113Cversion = data(:,20);
GCMSprepro.glycericacidmz292 = data(:,21);
GCMSprepro.glycericacidmz29413Cversion = data(:,22);
GCMSprepro.glycericacidmz307 = data(:,23);
GCMSprepro.glycericacidmz31013Cversion = data(:,24);
GCMSprepro.fumaricacid = data(:,25);
GCMSprepro.fumaricacid13Cversion = data(:,26);
GCMSprepro.serinemz204 = data(:,27);
GCMSprepro.serinemz20413Cversion = data(:,28);
GCMSprepro.serinemz218 = data(:,29);
GCMSprepro.serinemz22013Cversion = data(:,30);
GCMSprepro.serinemz306 = data(:,31);
GCMSprepro.serinemz30913Cversion = data(:,32);
GCMSprepro.threoninemz291 = data(:,33);
GCMSprepro.threoninemz29313Cversion = data(:,34);
GCMSprepro.threoninemz320 = data(:,35);
GCMSprepro.threoninemz32413Cversion = data(:,36);
GCMSprepro.thymine = data(:,37);
GCMSprepro.betaalanine = data(:,38);
GCMSprepro.malicacid = data(:,39);
GCMSprepro.malicacid13Cversion = data(:,40);
GCMSprepro.methionine = data(:,41);
GCMSprepro.cytosine = data(:,42);
GCMSprepro.cysteine = data(:,43);
GCMSprepro.cysteine13Cversion = data(:,44);
GCMSprepro.alphaketoglutaricacid = data(:,45);
GCMSprepro.alphaketoglutaricacid13Cversion = data(:,46);
GCMSprepro.ribose5phosphate = data(:,47);
GCMSprepro.piperidinecarboxylicacid = data(:,48);
GCMSprepro.glutamicacid = data(:,49);
GCMSprepro.glutamicacid13C = data(:,50);
GCMSprepro.phenylalaninemz192 = data(:,51);
GCMSprepro.phenylalaninemz20013Cversion = data(:,52);
GCMSprepro.phenylalaninemz218 = data(:,53);
GCMSprepro.phenylalaninemz22013Cversion = data(:,54);
GCMSprepro.asparagine = data(:,55);
GCMSprepro.asparagine13Cversion = data(:,56);
GCMSprepro.glutamine = data(:,57);
GCMSprepro.glutamine13Cversion = data(:,58);
GCMSprepro.phosphoethanolaminemz188 = data(:,59);
GCMSprepro.phosphoethanolaminemz19013Cversion = data(:,60);
GCMSprepro.phosphoethanolaminemz414 = data(:,61);
GCMSprepro.phosphoethanolaminemz41613Cversion = data(:,62);
GCMSprepro.glycericacid3phosphate = data(:,63);
GCMSprepro.glycericacid3phosphate13Cversion = data(:,64);
GCMSprepro.citricacidmz273 = data(:,65);
GCMSprepro.citricacidmz27813Cversion = data(:,66);
GCMSprepro.citricacidmz363 = data(:,67);
GCMSprepro.citricacidmz36813Cversion = data(:,68);
GCMSprepro.fructose = data(:,69);
GCMSprepro.glucose = data(:,70);
GCMSprepro.glucose13Cversion = data(:,71);
GCMSprepro.lysinemz230 = data(:,72);
GCMSprepro.lysinemz23413Cversion = data(:,73);
GCMSprepro.lysinemz317 = data(:,74);
GCMSprepro.lysinemz32213Cversion = data(:,75);
GCMSprepro.tyrosine = data(:,76);
GCMSprepro.tyrosine13Cversion = data(:,77);
GCMSprepro.mannitol = data(:,78);
GCMSprepro.mannitol13Cversion = data(:,79);
GCMSprepro.myoinositolmz305 = data(:,80);
GCMSprepro.myoinositolmz30813Cversion = data(:,81);
GCMSprepro.myoinositolmz318 = data(:,82);
GCMSprepro.myoinositolmz32213Cversion = data(:,83);
GCMSprepro.guanine = data(:,84);
GCMSprepro.tryptophan = data(:,85);
GCMSprepro.tryptophan13Cversion = data(:,86);
GCMSprepro.glucose6phosphate = data(:,87);
GCMSprepro.glucose6phosphate13Cversion = data(:,88);
GCMSprepro.adenosine = data(:,89);
GCMSprepro.adenosine13Cversion = data(:,90);
GCMSprepro.cholesterol = data(:,91);

%% Clear temporary variables
clearvars data raw cellVectors R;
%% GCMS calculations from raw to processed
GC = GCMSprepro;

% obtain  6 QC samples
QC_GC = [5,12,34,41,48,62];
n_QC_GC = length(QC_GC);

% SHOW THAT CORRECT QC SAMPLES HAVE BEEN TAKEN
GC{QC_GC,1}

% order of study samples:
% Note we make order = 
% Batch, time, Control / Ikaros
%  9      0    C
%  9      0    I
% ..
% 12      24   I
Study_GC = [35,36,43,42,44,45,46,47,38,37,39,40,53,54,50,49,60,61,58,59,57,56,52,51,6,7,14,13,9,8,18,17,10,11,16,15,25,26,20,19,23,24,30,29,22,21,27,28];
n_Study_GC = length(Study_GC); 
% SHOW THAT CORRECT STUDY SAMPLES HAVE BEEN TAKEN
GC{Study_GC,1};

%% Selection of variables and corresponding Internal standards
% Numbers respond to columns of the Excel sheet
% Note first value is the metabolite and 2nd value the corresponding IS
IS_GC = [3 4;19 20;23 24;27 28;41 42;45 46;47 48;61 62;65 66;67 68;72 73;80 81; 84 85;89 90;91 92;5 48;39 73;44 62;49 62;71 48;86 62;93 62];

for i = 1:22
    GC_QC_IS(:,i) = GC{QC_GC,IS_GC(i,1)}./GC{QC_GC,IS_GC(i,2)};
    GC_Study_IS(:,i) = GC{Study_GC,IS_GC(i,1)}./GC{Study_GC,IS_GC(i,2)};
end

RSD_GC = std(GC_QC_IS)./mean(GC_QC_IS);
GC_features = GC.Properties.VariableNames(IS_GC(:,1));
GC_features_IS = GC.Properties.VariableNames(IS_GC(:,2));
RSDGC.name = GC_features;
RSDGC.value = RSD_GC;

GCSampleNames_Study = GC(Study_GC,1)
GCSampleNames_QC = GC(QC_GC,1)

%Remove batch 12
% Only batch 9, 10, 11 are written to excel 
%Write to Excel file
xlswrite('GC_Processed.xls',GC_features,'Study Samples','B1:W1')
xlswrite('GC_Processed.xls',GCSampleNames_Study{1:36,:},'Study Samples','A2:A37')
xlswrite('GC_Processed.xls',GC_Study_IS(1:36,:),'Study Samples','B2:W37')

xlswrite('GC_Processed.xls',GC_features,'QC Samples','B1:W1')
xlswrite('GC_Processed.xls',GCSampleNames_QC{:,:},'QC Samples','A2:A7')
xlswrite('GC_Processed.xls',GC_QC_IS,'QC Samples','B2:W7')

% Make QC vs Studysample plot of autoscaled data
GC_All = [GC_QC_IS;GC_Study_IS];
m_All = mean(GC_All);s_All = std(GC_All);
GC_All_auto = (GC_All - ones((n_QC_GC+n_Study_GC),1)*m_All)./(ones((n_QC_GC+n_Study_GC),1)*s_All);
[u,s,v] = svds(GC_All_auto,2);
T = u*s;
figure;
plot(T(1:n_QC_GC,1),T(1:n_QC_GC,2),'r*');hold on
plot(T(n_QC_GC+1:end,1),T(n_QC_GC+1:end,2),'bo');
legend('QC','Studysample')
title('GC QC sample plot')

%% IMPORT LCMS DATA
%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: LC_MS_raw_data.xlsx
%    Worksheet: Data
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2019/06/18 21:55:53

%% Import the LCMS data
[~, ~, raw] = xlsread('LC_MS_raw_data.xlsx','Data','A2:FD67');
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[3,4,5,6]);
raw = raw(:,[1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
LCMSpreprofinaljw = table;

%% Allocate imported array to column variable names
LCMSpreprofinaljw.order = data(:,1);
LCMSpreprofinaljw.biolbatch = data(:,2);
LCMSpreprofinaljw.timepoint = cellVectors(:,1);
LCMSpreprofinaljw.condition = cellVectors(:,2);
LCMSpreprofinaljw.label = cellVectors(:,3);
LCMSpreprofinaljw.Id = cellVectors(:,4);
LCMSpreprofinaljw.expbatch = data(:,3);
LCMSpreprofinaljw.Lhistidine = data(:,4);
LCMSpreprofinaljw.LHistidine13C = data(:,5);
LCMSpreprofinaljw.L4hydroxyproline = data(:,6);
LCMSpreprofinaljw.Asn_13C = data(:,7);
LCMSpreprofinaljw.ophosphoethanolamine = data(:,8);
LCMSpreprofinaljw.ophosphoethanolamine13C = data(:,9);
LCMSpreprofinaljw.Lasparagine = data(:,10);
LCMSpreprofinaljw.LAsparagine13C = data(:,11);
LCMSpreprofinaljw.methylLhistidine = data(:,12);
LCMSpreprofinaljw.LAsparagine13C1 = data(:,13);
LCMSpreprofinaljw.taurine = data(:,14);
LCMSpreprofinaljw.LAsparagine13C2 = data(:,15);
LCMSpreprofinaljw.Lserine = data(:,16);
LCMSpreprofinaljw.LSerine13C = data(:,17);
LCMSpreprofinaljw.NmethylLhistidine = data(:,18);
LCMSpreprofinaljw.LAsparagine13C3 = data(:,19);
LCMSpreprofinaljw.glycylglycine = data(:,20);
LCMSpreprofinaljw.LAsparagine13C4 = data(:,21);
LCMSpreprofinaljw.Histamine = data(:,22);
LCMSpreprofinaljw.Arg13C = data(:,23);
LCMSpreprofinaljw.Larginine = data(:,24);
LCMSpreprofinaljw.Arg13C1 = data(:,25);
LCMSpreprofinaljw.Lglutamine = data(:,26);
LCMSpreprofinaljw.LGlutamine13C = data(:,27);
LCMSpreprofinaljw.Lglycine = data(:,28);
LCMSpreprofinaljw.Glycine13C = data(:,29);
LCMSpreprofinaljw.Lcarnosine = data(:,30);
LCMSpreprofinaljw.Glycine13C1 = data(:,31);
LCMSpreprofinaljw.Lhomoserine = data(:,32);
LCMSpreprofinaljw.Lhomoserine13C = data(:,33);
LCMSpreprofinaljw.Asn_13C1 = data(:,34);
LCMSpreprofinaljw.Glycine13C2 = data(:,35);
LCMSpreprofinaljw.Glycine13C3 = data(:,36);
LCMSpreprofinaljw.Arg13C2 = data(:,37);
LCMSpreprofinaljw.LSerine13C1 = data(:,38);
LCMSpreprofinaljw.N6N6N6trimethylLlysine = data(:,39);
LCMSpreprofinaljw.Glycine13C4 = data(:,40);
LCMSpreprofinaljw.LHistidine13C1 = data(:,41);
LCMSpreprofinaljw.ophosphoethanolamine13C1 = data(:,42);
LCMSpreprofinaljw.LAsparagine13C5 = data(:,43);
LCMSpreprofinaljw.Lhomoserine13C1 = data(:,44);
LCMSpreprofinaljw.Lasparticacid = data(:,45);
LCMSpreprofinaljw.Lasparcticacid13C = data(:,46);
LCMSpreprofinaljw.Lglutamicacid = data(:,47);
LCMSpreprofinaljw.Lglutamicacid13C = data(:,48);
LCMSpreprofinaljw.sarcosine = data(:,49);
LCMSpreprofinaljw.Lthreonine13C = data(:,50);
LCMSpreprofinaljw.citrulline = data(:,51);
LCMSpreprofinaljw.citrulline13C = data(:,52);
LCMSpreprofinaljw.Betaalanine = data(:,53);
LCMSpreprofinaljw.Lglutamicacid13C1 = data(:,54);
LCMSpreprofinaljw.ethanolamine = data(:,55);
LCMSpreprofinaljw.ethanolamine13C = data(:,56);
LCMSpreprofinaljw.Lmethioninesulfoxide = data(:,57);
LCMSpreprofinaljw.Lasparcticacid13C1 = data(:,58);
LCMSpreprofinaljw.gammaaminobutyricacid = data(:,59);
LCMSpreprofinaljw.gammaaminobutyricacid13C = data(:,60);
LCMSpreprofinaljw.Lthreonine = data(:,61);
LCMSpreprofinaljw.Lthreonine13C1 = data(:,62);
LCMSpreprofinaljw.Lalanine = data(:,63);
LCMSpreprofinaljw.Lalanine13C = data(:,64);
LCMSpreprofinaljw.aminolevulinicacid = data(:,65);
LCMSpreprofinaljw.aminolevulinicacid13C = data(:,66);
LCMSpreprofinaljw.homoLarginine = data(:,67);
LCMSpreprofinaljw.Lglutamicacid13C2 = data(:,68);
LCMSpreprofinaljw.gammaLglutamylLalanine = data(:,69);
LCMSpreprofinaljw.gammaLglutamylLalanine13C = data(:,70);
LCMSpreprofinaljw.ADMA = data(:,71);
LCMSpreprofinaljw.Lthreonine13C2 = data(:,72);
LCMSpreprofinaljw.SDMA = data(:,73);
LCMSpreprofinaljw.Lthreonine13C3 = data(:,74);
LCMSpreprofinaljw.Glu_13C = data(:,75);
LCMSpreprofinaljw.Asp_13C = data(:,76);
LCMSpreprofinaljw.Thr_13C = data(:,77);
LCMSpreprofinaljw.Ala_13C = data(:,78);
LCMSpreprofinaljw.Citrulline13C = data(:,79);
LCMSpreprofinaljw.Ethanolamine13C = data(:,80);
LCMSpreprofinaljw.Gammaaminobutyricacid13C = data(:,81);
LCMSpreprofinaljw.aminolevulinic13C = data(:,82);
LCMSpreprofinaljw.gammaLglutamylLalanine13C1 = data(:,83);
LCMSpreprofinaljw.epinephrine = data(:,84);
LCMSpreprofinaljw.Lproline13C = data(:,85);
LCMSpreprofinaljw.L2aminoadipicacid = data(:,86);
LCMSpreprofinaljw.L2aminoadipicacid13C = data(:,87);
LCMSpreprofinaljw.S5adenosylLhomocysteine = data(:,88);
LCMSpreprofinaljw.Lalphaaminobutyricacid13C = data(:,89);
LCMSpreprofinaljw.oacetylLserine = data(:,90);
LCMSpreprofinaljw.Lproline13C1 = data(:,91);
LCMSpreprofinaljw.Norepinephrine = data(:,92);
LCMSpreprofinaljw.Lproline13C2 = data(:,93);
LCMSpreprofinaljw.Lalphaaminobutyricacid = data(:,94);
LCMSpreprofinaljw.Lalphaaminobutyricacid13C1 = data(:,95);
LCMSpreprofinaljw.Ornithine = data(:,96);
LCMSpreprofinaljw.Ornithine13C = data(:,97);
LCMSpreprofinaljw.dopamine = data(:,98);
LCMSpreprofinaljw.Tyr13C = data(:,99);
LCMSpreprofinaljw.LLysine = data(:,100);
LCMSpreprofinaljw.Llysine13C = data(:,101);
LCMSpreprofinaljw.Ltyrosine = data(:,102);
LCMSpreprofinaljw.Tyr13C1 = data(:,103);
LCMSpreprofinaljw.hydroxyLtryptophan = data(:,104);
LCMSpreprofinaljw.Tyr13C2 = data(:,105);
LCMSpreprofinaljw.DL5hydroxylysine = data(:,106);
LCMSpreprofinaljw.Lalphaaminobutyricacid13C2 = data(:,107);
LCMSpreprofinaljw.Lproline = data(:,108);
LCMSpreprofinaljw.Lproline13C3 = data(:,109);
LCMSpreprofinaljw.Ala_13C1 = data(:,110);
LCMSpreprofinaljw.Pro_13C = data(:,111);
LCMSpreprofinaljw.Tyr_13C = data(:,112);
LCMSpreprofinaljw.Lys_13C = data(:,113);
LCMSpreprofinaljw.L2aminoadipicacid13C1 = data(:,114);
LCMSpreprofinaljw.Lalphaaminobutyricacid13C3 = data(:,115);
LCMSpreprofinaljw.Ornithine13C1 = data(:,116);
LCMSpreprofinaljw.HIAA = data(:,117);
LCMSpreprofinaljw.Trp13C = data(:,118);
LCMSpreprofinaljw.methoxytyramine = data(:,119);
LCMSpreprofinaljw.Trp13C1 = data(:,120);
LCMSpreprofinaljw.Lkynurenine = data(:,121);
LCMSpreprofinaljw.Trp13C2 = data(:,122);
LCMSpreprofinaljw.Ltryptophan = data(:,123);
LCMSpreprofinaljw.Trp13C3 = data(:,124);
LCMSpreprofinaljw.Lisoleucine = data(:,125);
LCMSpreprofinaljw.Lisoleucine13C = data(:,126);
LCMSpreprofinaljw.Lleucine = data(:,127);
LCMSpreprofinaljw.Lleucine13C = data(:,128);
LCMSpreprofinaljw.Lphenylalanine = data(:,129);
LCMSpreprofinaljw.Lphenylalanine13C = data(:,130);
LCMSpreprofinaljw.putrescine = data(:,131);
LCMSpreprofinaljw.putrescine13C = data(:,132);
LCMSpreprofinaljw.methyldopa = data(:,133);
LCMSpreprofinaljw.Met13C = data(:,134);
LCMSpreprofinaljw.Lpipecolicacid = data(:,135);
LCMSpreprofinaljw.Val13C = data(:,136);
LCMSpreprofinaljw.Lmethionine = data(:,137);
LCMSpreprofinaljw.Met13C1 = data(:,138);
LCMSpreprofinaljw.Lvaline = data(:,139);
LCMSpreprofinaljw.Val13C1 = data(:,140);
LCMSpreprofinaljw.serotonine = data(:,141);
LCMSpreprofinaljw.Met13C2 = data(:,142);
LCMSpreprofinaljw.Spermidine = data(:,143);
LCMSpreprofinaljw.spermine13C = data(:,144);
LCMSpreprofinaljw.Spermine = data(:,145);
LCMSpreprofinaljw.spermine13C1 = data(:,146);
LCMSpreprofinaljw.methoxytyrosine = data(:,147);
LCMSpreprofinaljw.VarName152 = data(:,148);
LCMSpreprofinaljw.Val_13C = data(:,149);
LCMSpreprofinaljw.Leu_13C = data(:,150);
LCMSpreprofinaljw.ILe_13C = data(:,151);
LCMSpreprofinaljw.Met_13C = data(:,152);
LCMSpreprofinaljw.Phe_13C = data(:,153);
LCMSpreprofinaljw.Trp_13C = data(:,154);
LCMSpreprofinaljw.Spermine13C = data(:,155);
LCMSpreprofinaljw.Putrescine13C = data(:,156);

% Clear temporary variables
clearvars data raw cellVectors R;
%%
LC = LCMSpreprofinaljw;
% obtain 8 QC samples
QC_LC = [5,12,19,26,44,51,58,65]-1; % Note QCs B,C,D,E,I,J,K,L
n_QC_LC = length(QC_LC);
% Not choose QCs after blank. QC H has gone wrong
% SHOW THAT CORRECT QC SAMPLES HAVE BEEN TAKEN
LC{QC_LC,5}

% order study samples
Study_LC = [38 39 46 45 47 48 49 50 41 40 42 43 56 57 53 52 63 64 61 62 60 59 55 54 6 7 14 13 9 8 18 17 10 11 16 15 27 28 21 20 24 25 32 31 23 22 29 30]-1;
n_Study_LC = length(Study_LC);

% SHOW THAT CORRECT STUDY SAMPLES HAVE BEEN TAKEN
LC(Study_LC,2:4)
% Internal standard selection: 
% Values mean variable names in correct order as on metabolights
% Note the IS is always 1 higher than the metabolite mentioned
IS_LC = [60;136;124;122;105;13;58;44;126;7;23;97;99;120;25;134;50;132;1;3;11;17;21;29;42;52;54;56;83;91;93;101;128;130;140;142] + 7;
% Note + 7 as the first data column starts at column H

for i = 1:36
    LC_QC_IS(:,i) = LC{QC_LC,IS_LC(i)}./LC{QC_LC,IS_LC(i)+1};
    LC_Study_IS(:,i) = LC{Study_LC,IS_LC(i)}./LC{Study_LC,IS_LC(i)+1};
end


%Note when Features are measured in LC as well as GC then the LC
%measurement is used, as Amines are better measured in LC (From Amy Harms).
LC_features = LC.Properties.VariableNames(IS_LC);
LC_features_IS = LC.Properties.VariableNames(IS_LC+1);

RSD_LC = std(LC_QC_IS)./mean(LC_QC_IS);
RSDLC.name = LC_features;
RSDLC.value = RSD_LC;

% write to excel file
LCSampleNames_Study = LC(Study_LC,5)
LCSampleNames_QC = LC(QC_LC,5)

%Remove batch 12
% Only batch 9, 10, 11 are written to excel 
%Write to Excel file
xlswrite('LC_Processed.xls',LC_features,'Study Samples','B1:AK1')
xlswrite('LC_Processed.xls',LCSampleNames_Study{1:36,:},'Study Samples','A2:A37')
xlswrite('LC_Processed.xls',LC_Study_IS(1:36,:),'Study Samples','B2:AK37')

xlswrite('LC_Processed.xls',LC_features,'QC Samples','B1:AK1')
xlswrite('LC_Processed.xls',LCSampleNames_QC{:,:},'QC Samples','A2:A9')
xlswrite('LC_Processed.xls',LC_QC_IS,'QC Samples','B2:AK9')

% Make QC vs Studysample plot
LC_All = [LC_QC_IS;LC_Study_IS];
m_All = mean(LC_All);s_All = std(LC_All);
LC_All_auto = (LC_All - ones((n_QC_LC+n_Study_LC),1)*m_All)./(ones((n_QC_LC+n_Study_LC),1)*s_All);
[u,s,v] = svds(LC_All_auto,2);
T = u*s;
figure;
plot(T(1:n_QC_LC,1),T(1:n_QC_LC,2),'r*');hold on
plot(T(n_QC_LC+1:end,1),T(n_QC_LC+1:end,2),'bo');
legend('QC','Studysample')
title('LC QC sample plot')




%% Remove batch 12
% Note batch 12 is deviating
X_all = [GC_Study_IS LC_Study_IS];
L = log(X_all);
% Ratios We will look at relatve changes = Ikaros / C  profiles for each batch
for i=1:24
    R(i,:) = L(i*2,:)-L(i*2-1,:);
end
Rm = mncn(R);
[u,s,v] = svds(Rm,2);
T = u*s;
figure
plot(T(1:6,1),T(1:6,2),'bo-');hold on
plot(T(7:12,1),T(7:12,2),'r+-')
plot(T(13:18,1),T(13:18,2),'gv-')
plot(T(19:24,1),T(19:24,2),'k*-')
legend('9','10','11','12')
text(T(1,1),T(1,2),' 0')
text(T(7,1),T(7,2),' 0')
text(T(13,1),T(13,2),' 0')
text(T(19,1),T(19,2),' 0')

expl1 = s(1,1)^2/trace(Rm'*Rm);
expl2 = s(2,2)^2/trace(Rm'*Rm);
xlabel('PC1 62%')
ylabel('PC2 16%')

% Black patters of batch 12 is completely different from others

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END MATLAB CODE


####  THIS PORTION OF THE SCRIPT IS RUN IN R AS .R SCRIPT ####
##############################################################


# Packages and functions
########################

install.packages("readxl")
library("readxl")
library("mixOmics")

view.reporter <- function (data, reporter, one.series = F, cond , mylegend = "Ik/Ctrl") {
  repo.data <- data[reporter,]
  ave.data <- t(apply(repo.data, 1, function (x) tapply(x,cond,mean, na.rm = T)))
  ave.data <- ave.data[,c(1,4,6,2,3,5,7,10,12,8,9,11)]
  cols <- colnames(ave.data)
  print(ave.data)
  time <- c(0,2,5,12,18,24)
  colors <- c("red", 'blue')
  for (i in 1:length(reporter)) {
    plot(time, y = rep(1, length(time)), ylim = c(min(ave.data[i,], na.rm = T), max(ave.data[i,], na.rm = T)), 
         ty = "l", ylab = "Expression", col = "white",,main = reporter[i])
    x.data <- ave.data[i,1:6]
    lines(time[!is.na(x.data)], x.data[!is.na(x.data)], col = colors[1])
    if (one.series == F) {
      y.data <- ave.data[i,7:12]
      lines(time[!is.na(y.data)], y.data[!is.na(y.data)], col = colors[2])
      legend("topright", legend = c( "Control", "Ikaros"), text.col = colors)
    } else {
      legend("topright", legend = mylegend)
    }
  }  
}

process <- function (data, title = NULL) {
  batch <- rep(c(9,10,11), each = 12)
  time <- rep(rep(c(0,2,6,12,18,24), each = 2), 3)
  treatment <- rep (c("Control", "Ikaros"), 18)
  data <- data[,-1]
  rownames(data) <- paste(treatment, "_", time, "_h_batch_", batch, sep = "")
  data <- t(data)
  data <- data[,sort(colnames(data))]
  reorder <- c(1:3, 13:18, 4:12, 19:21, 31:36,22:30)
  data <- data[,reorder]
  boxplot(log(data)~ col(data), names = colnames(data), 
          col = rep(c(2:7), each = 3), las = 2, main = title, cex.axis = 0.6)
  data
}

visualization <- function (data, reporter, cond, main, ikaros = c(19:36)) {
  par(mfrow= c(2,3))
  mycol = rep(rainbow(6), each = 3)
  mycol[mycol == "#FFFF00FF"] = "orange"
  plotIndiv(pca(t(data), center = TRUE, scale = TRUE), col = mycol, style = "graphics" , title = main, size.title = 1)
  plotIndiv(pca(t(data[,ikaros]), center = TRUE, scale = TRUE), col = mycol, style = "graphics" , title = main, size.title = 1)
  boxplot(data ~ col(data), names = colnames(data), 
          col = mycol, las = 2, main = main, cex.axis = 0.6)
  view.reporter (data, reporter, cond = index)

}

## 1. Imput data
################
LC <- as.data.frame(read_excel("LC_Processed.xls", sheet = "Study Samples", range = "A1:AK37"))
GC <- as.data.frame(read_excel("GC_Processed.xls", sheet = "Study Samples", range = "A1:W37"))

## 2. Reordering of data
########################
par(mfrow = c(2,1))
LC.data <- process(data = LC, title = "LC data")
GC.data<- process(data = GC, title = "GC data")
dev.off()

## 3. Fused data from both platforms
####################################
fused.data <- rbind(LC.data, GC.data)
fused.data.log <- log(fused.data)
  
  
## 4. MEAN CENTERING
index <- paste(rep(c("Control", "Treatment"), each = 18), rep(c(0,2,6,12,18,24), each = 3), sep= "_") 
median <- apply(fused.data.log, 2, median, na.rm = T) # median per sample
means.of.medians <- tapply(median, index, mean)[c(1,4,6,2,3,5,7,10,12,8,9,11)]
means.of.medians.vector <- rep(means.of.medians, each = 3)
means.of.medians.deviation <-median-means.of.medians.vector
means.of.medians.deviation.matrix <- matrix(data = rep(means.of.medians.deviation, nrow(fused.data.log)), 
                                            nrow = nrow(fused.data.log), ncol = ncol(fused.data.log), byrow = T)
fused.data.log.mean <- fused.data.log - means.of.medians.deviation.matrix



## Futher visualisation and check with reporter metabolites
###########################################################

reporter <- c("lacticacid", "glucose", "pyruvicacid")
visualization (fused.data, reporter, cond = index, main = "Fused data")
visualization (fused.data.log, reporter, cond = index, main = "Fused data.log")
visualization (fused.data.log.mean, reporter, cond = index, main = "Fused data.log.mean")

write.table (fused.data.log.mean, "Metabolomics_fused_log_mean_2019.txt", quote = F, row.names = T, col.names = T, sep = "\t")



